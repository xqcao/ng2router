import { Observable } from 'rxjs/Observable';
export function cacheFromNetworkOp(worker, url, cache) {
    var op = function () { return worker
        .refresh(worker.adapter.newRequest(url))
        .switchMap(function (resp) { return worker.cache.store(cache, url, resp); }); };
    op.desc = { type: 'cacheFromNetworkOp', worker: worker, url: url, cache: cache };
    return op;
}
export function copyExistingCacheOp(oldWorker, newWorker, url, cache) {
    var op = function () { return oldWorker
        .cache
        .load(cache, url)
        .switchMap(function (resp) { return !!resp
        ? newWorker.cache.store(cache, url, resp)
        : Observable.empty(); }); };
    op.desc = { type: 'copyExistingCacheOp', oldWorker: oldWorker, newWorker: newWorker, url: url, cache: cache };
    return op;
}
export function copyExistingOrFetchOp(oldWorker, newWorker, url, cache) {
    var op = function () { return Observable
        .concat(copyExistingCacheOp(oldWorker, newWorker, url, cache)(), cacheFromNetworkOp(newWorker, url, cache)())
        .take(1); };
    op.desc = { type: 'copyExistingOrFetchOp', oldWorker: oldWorker, newWorker: newWorker, url: url, cache: cache };
    return op;
}
export function deleteCacheOp(worker, key) {
    var op = function () { return worker.cache.remove(key); };
    op.desc = { type: 'deleteCacheOp', worker: worker, key: key };
    return op;
}
export function fetchFromCacheInstruction(worker, req, cache) {
    var op = function () { return worker
        .cache
        .load(cache, req)
        .filter(function (v) { return !!v; }); };
    op.desc = { type: 'fetchFromCacheInstruction', worker: worker, req: req, cache: cache };
    return op;
}
export function fetchFromNetworkInstruction(worker, req) {
    var op = function () { return worker
        .refresh(req); };
    op.desc = { type: 'fetchFromNetworkInstruction', worker: worker, req: req };
    return op;
}
export function rewriteUrlInstruction(worker, req, destUrl) {
    var op = function () { return worker
        .fetch(worker.adapter.newRequest(req, { url: destUrl })); };
    op.desc = { type: 'rewriteUrlInstruction', worker: worker, req: req, destUrl: destUrl };
    return op;
}
//# sourceMappingURL=common.js.map