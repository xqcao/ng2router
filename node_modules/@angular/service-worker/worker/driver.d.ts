import { PluginFactory } from './api';
import { VersionWorkerImpl } from './worker';
import { ScopedCache } from './cache';
import { NgSwAdapter, NgSwCache, NgSwEvents, NgSwFetch } from './facade';
export declare class Driver {
    private manifestUrl;
    private plugins;
    private scope;
    private adapter;
    private cache;
    private events;
    fetcher: NgSwFetch;
    cacheActive: ScopedCache;
    cacheInstalled: ScopedCache;
    active: Promise<VersionWorkerImpl>;
    installing: Promise<VersionWorkerImpl>;
    constructor(manifestUrl: string, plugins: PluginFactory<any>[], scope: ServiceWorkerGlobalScope, adapter: NgSwAdapter, cache: NgSwCache, events: NgSwEvents, fetcher: NgSwFetch);
    private fetchManifestFromNetwork();
    private fetchManifestFromCache(cache);
    private fetchStartupManifest();
    private maybeCreateWorker(manifest);
    private handleMessage(message);
}
