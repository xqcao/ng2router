import 'rxjs/add/observable/concat';
import 'rxjs/add/observable/defer';
import 'rxjs/add/observable/empty';
import 'rxjs/add/observable/from';
import 'rxjs/add/observable/fromEvent';
import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/concat';
import 'rxjs/add/operator/concatMap';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/filter';
import 'rxjs/add/operator/first';
import 'rxjs/add/operator/ignoreElements';
import 'rxjs/add/operator/let';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/reduce';
import 'rxjs/add/operator/switchMap';
import 'rxjs/add/operator/take';
import 'rxjs/add/operator/toPromise';
import { Observable } from 'rxjs/Observable';
export var LiteSubject = (function () {
    function LiteSubject() {
        var _this = this;
        this.subscribers = [];
        this.observable = Observable.create(function (obs) {
            _this.subscribers.push(obs);
            return function () {
                var index = _this.subscribers.indexOf(obs);
                if (index >= 0) {
                    _this.subscribers.splice(index, 1);
                }
            };
        });
    }
    LiteSubject.prototype.next = function (value) {
        this.subscribers.forEach(function (obs) { return obs.next(value); });
    };
    LiteSubject.prototype.complete = function () {
        this.subscribers.forEach(function (obs) { return obs.complete(); });
    };
    Object.defineProperty(LiteSubject.prototype, "hasSubscribers", {
        get: function () {
            return this.subscribers.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    return LiteSubject;
}());
export function doAsync(fn) {
    return function (obs) { return obs
        .concatMap(function (value) { return fn(value)
        .reduce(function () { return value; }, value); }); };
}
//# sourceMappingURL=rxjs.js.map