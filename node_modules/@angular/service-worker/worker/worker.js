import { fetchFromNetworkInstruction } from './common';
import { Observable } from 'rxjs/Observable';
export var VersionWorkerImpl = (function () {
    function VersionWorkerImpl(scope, manifest, adapter, cache, fetcher, plugins) {
        this.scope = scope;
        this.manifest = manifest;
        this.adapter = adapter;
        this.cache = cache;
        this.fetcher = fetcher;
        this.plugins = plugins;
    }
    VersionWorkerImpl.prototype.refresh = function (req) {
        return this.fetcher.refresh(req);
    };
    VersionWorkerImpl.prototype.fetch = function (req) {
        var instructions = [
            fetchFromNetworkInstruction(this, req),
        ];
        this
            .plugins
            .filter(function (plugin) { return !!plugin.fetch; })
            .forEach(function (plugin) { return plugin.fetch(req, instructions); });
        return Observable
            .from(instructions)
            .concatMap(function (op) { return op(); })
            .filter(function (resp) { return resp !== null; })
            .first();
    };
    VersionWorkerImpl.prototype.setup = function (previous) {
        var operations = [];
        for (var i = 0; i < this.plugins.length; i++) {
            var plugin = this.plugins[i];
            if (plugin.update && previous) {
                plugin.update(operations, previous.plugins[i]);
            }
            else {
                plugin.setup(operations);
            }
        }
        return Observable
            .from(operations)
            .concatMap(function (op) { return op(); });
    };
    VersionWorkerImpl.prototype.cleanup = function () {
        return this.plugins.reduce(function (ops, plugin) {
            if (plugin.cleanup) {
                plugin.cleanup(ops);
            }
            return ops;
        }, []);
    };
    VersionWorkerImpl.prototype.message = function (message) {
        return this.plugins.reduce(function (ops, plugin) {
            if (plugin.message) {
                plugin.message(message, ops);
            }
            return ops;
        }, []);
    };
    VersionWorkerImpl.prototype.push = function (data) {
        this
            .plugins
            .filter(function (plugin) { return !!plugin.push; })
            .forEach(function (plugin) { return plugin.push(data); });
    };
    VersionWorkerImpl.prototype.showNotification = function (title, options) {
        this.scope.registration.showNotification(title, options);
    };
    return VersionWorkerImpl;
}());
//# sourceMappingURL=worker.js.map