import { Observable } from 'rxjs/Observable';
import { LiteSubject } from './rxjs';
export var Verbosity;
(function (Verbosity) {
    Verbosity[Verbosity["INFO"] = 1] = "INFO";
    Verbosity[Verbosity["DETAIL"] = 2] = "DETAIL";
    Verbosity[Verbosity["TECHNICAL"] = 3] = "TECHNICAL";
})(Verbosity || (Verbosity = {}));
// A buffer to store log messages until a subscriber connects. 
var logBuffer = [];
// Subject which will be used to broadcast log messages once there's a subscriber.
var logSubject = null;
var logLevel = Verbosity.INFO;
// The stream of log messages. May return buffered messages to the first subscriber,
// if buffering has not been disabled. Thereafter returns messages as they're logged.
var logStream = Observable.create(function (observer) {
    // Create the subject if it doesn't exist already.
    if (logSubject === null) {
        logSubject = new LiteSubject();
    }
    // An Observable representing buffered messages. Initialized to empty.
    var buffered = Observable.empty();
    // If the buffer exists, make it Observable.
    if (logBuffer !== null) {
        buffered = Observable.from(logBuffer);
        logBuffer = null;
    }
    // Combine (possibly empty) buffered messages with the subject, and pipe them to the
    // subscriber.
    return buffered
        .concat(logSubject.observable)
        .subscribe(observer);
});
// Log a message at the given log level.
export function log(verbosity, message) {
    // If the buffer is active, log it there. If the Subject is active, log there.
    if (logBuffer !== null) {
        logBuffer.push({ verbosity: verbosity, message: message });
    }
    else if (logSubject !== null) {
        logSubject.next({ verbosity: verbosity, message: message });
    }
}
export function readLog(verbosity) {
    return logStream
        .filter(function (entry) { return entry.verbosity <= logLevel; })
        .map(function (entry) { return entry.message; });
}
export function setLogLevel(verbosity) {
    logLevel = verbosity;
}
export function disableLogBuffering() {
    logBuffer = null;
}
//# sourceMappingURL=logging.js.map