import { cacheFromNetworkOp, copyExistingOrFetchOp, deleteCacheOp, fetchFromCacheInstruction } from '@angular/service-worker/worker';
export function StaticContentCache(options) {
    var manifestKey = (options && options.manifestKey) || 'static';
    return function (worker) { return new StaticContentCacheImpl(worker, manifestKey); };
}
export var StaticContentCacheImpl = (function () {
    function StaticContentCacheImpl(worker, key) {
        this.worker = worker;
        this.key = key;
        this.cacheKey = key === 'static' ? key : "static:" + key;
    }
    Object.defineProperty(StaticContentCacheImpl.prototype, "staticManifest", {
        get: function () {
            return this.worker.manifest[this.key];
        },
        enumerable: true,
        configurable: true
    });
    StaticContentCacheImpl.prototype.setup = function (operations) {
        var _this = this;
        operations.push.apply(operations, Object
            .keys(this.staticManifest.urls)
            .map(function (url) { return cacheFromNetworkOp(_this.worker, url, _this.cacheKey); }));
    };
    StaticContentCacheImpl.prototype.update = function (operations, previous) {
        var _this = this;
        operations.push.apply(operations, Object
            .keys(this.staticManifest.urls)
            .map(function (url) {
            var hash = _this.staticManifest.urls[url];
            var previousHash = previous.staticManifest.urls[url];
            if (previousHash === hash) {
                return copyExistingOrFetchOp(previous.worker, _this.worker, url, _this.cacheKey);
            }
            else {
                return cacheFromNetworkOp(_this.worker, url, _this.cacheKey);
            }
        }));
    };
    StaticContentCacheImpl.prototype.fetch = function (req, instructions) {
        instructions.unshift(fetchFromCacheInstruction(this.worker, req, this.cacheKey));
    };
    StaticContentCacheImpl.prototype.cleanup = function (operations) {
        operations.push(deleteCacheOp(this.worker, this.cacheKey));
    };
    return StaticContentCacheImpl;
}());
//# sourceMappingURL=index.js.map