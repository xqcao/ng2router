import { LiteSubject } from '@angular/service-worker/worker';
import { Observable } from 'rxjs/Observable';
var EMPTY_MANIFEST = {};
var NOTIFICATION_OPTION_NAMES = [
    'actions',
    'body',
    'dir',
    'icon',
    'lang',
    'renotify',
    'requireInteraction',
    'tag',
    'vibrate',
    'data'
];
function pushesOp(push) {
    var op = function () { return push.pushes; };
    op.desc = { type: 'pushesOp', push: push };
    return op;
}
export function Push() {
    return function (worker) { return new PushImpl(worker); };
}
export var PushImpl = (function () {
    function PushImpl(worker) {
        var _this = this;
        this.worker = worker;
        this.pushBuffer = [];
        this.pushSubject = new LiteSubject();
        this.pushes = Observable.create(function (observer) {
            if (_this.pushBuffer !== null) {
                _this.pushBuffer.forEach(function (data) { return observer.next(data); });
            }
            _this.pushBuffer = null;
            var sub = _this.pushSubject.observable.subscribe(observer);
            return function () {
                sub.unsubscribe();
                if (!_this.pushSubject.hasSubscribers) {
                    _this.pushBuffer = [];
                }
            };
        });
    }
    Object.defineProperty(PushImpl.prototype, "pushManifest", {
        get: function () {
            return this.worker.manifest['push'] || EMPTY_MANIFEST;
        },
        enumerable: true,
        configurable: true
    });
    PushImpl.prototype.setup = function (ops) { };
    PushImpl.prototype.message = function (message, ops) {
        switch (message['cmd']) {
            case 'push':
                ops.push(pushesOp(this));
                break;
        }
    };
    PushImpl.prototype.push = function (data) {
        this.maybeShowNotification(data);
        if (this.pushBuffer === null) {
            this.pushSubject.next(data);
        }
        else {
            this.pushBuffer.push(data);
        }
    };
    PushImpl.prototype.maybeShowNotification = function (data) {
        if (!data.notification || !data.notification.title) {
            return;
        }
        var manifest = this.pushManifest;
        if (!manifest.showNotifications || (!!manifest.backgroundOnly && this.pushBuffer === null)) {
            return;
        }
        var desc = data.notification;
        var options = {};
        NOTIFICATION_OPTION_NAMES
            .filter(function (name) { return desc.hasOwnProperty(name); })
            .forEach(function (name) { return options[name] = desc[name]; });
        this.worker.showNotification(desc['title'], options);
    };
    return PushImpl;
}());
//# sourceMappingURL=index.js.map